


ARM Macro Assembler    Page 1 


    1 00000000         ;/*
    2 00000000         ; * File      : context_rvds.S
    3 00000000         ; * This file is part of RT-Thread RTOS
    4 00000000         ; * COPYRIGHT (C) 2006 - 2013, RT-Thread Development Tea
                       m
    5 00000000         ; *
    6 00000000         ; * The license and distribution terms for this file may
                        be
    7 00000000         ; * found in the file LICENSE in this distribution or at
                       
    8 00000000         ; * http://www.rt-thread.org/license/LICENSE
    9 00000000         ; *
   10 00000000         ; * Change Logs:
   11 00000000         ; * Date           Author       Notes
   12 00000000         ; * 2013-07-09     aozima       enhancement hard fault e
                       xception handler.
   13 00000000         ; */
   14 00000000         
   15 00000000         ;/**
   16 00000000         ; * @addtogroup CORTEX-M3
   17 00000000         ; */
   18 00000000         ;/*@{*/
   19 00000000         
   20 00000000 E000ED08 
                       SCB_VTOR
                               EQU              0xE000ED08  ; Vector Table Offs
                                                            et Register
   21 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; interrupt control
                                                             state register
   22 00000000 E000ED20 
                       NVIC_SYSPRI2
                               EQU              0xE000ED20  ; system priority r
                                                            egister (2)
   23 00000000 00FF0000 
                       NVIC_PENDSV_PRI
                               EQU              0x00FF0000  ; PendSV priority v
                                                            alue (lowest)
   24 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; value to trigger 
                                                            PendSV exception
   25 00000000         
   26 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   27 00000000                 THUMB
   28 00000000                 REQUIRE8
   29 00000000                 PRESERVE8
   30 00000000         
   31 00000000                 IMPORT           interrupt_switch_flag
   32 00000000                 IMPORT           interrupt_switch_task_from
   33 00000000                 IMPORT           interrupt_switch_task_to
   34 00000000         
   35 00000000         ;/*
   36 00000000         ; * os_sr_t os_enter_critical();
   37 00000000         ; */
   38 00000000         os_enter_critical
                               PROC



ARM Macro Assembler    Page 2 


   39 00000000                 EXPORT           os_enter_critical
   40 00000000 F3EF 8010       MRS              r0, PRIMASK
   41 00000004 B672            CPSID            I
   42 00000006 4770            BX               LR
   43 00000008                 ENDP
   44 00000008         
   45 00000008         ;/*
   46 00000008         ; * void os_exit_critical(os_sr_t sr);
   47 00000008         ; */
   48 00000008         os_exit_critical
                               PROC
   49 00000008                 EXPORT           os_exit_critical
   50 00000008 F380 8810       MSR              PRIMASK, r0
   51 0000000C 4770            BX               LR
   52 0000000E                 ENDP
   53 0000000E         
   54 0000000E         ;/*
   55 0000000E         ; * void os_arch_context_switch(rt_uint32 from, rt_uint3
                       2 to);
   56 0000000E         ; * r0 --> from
   57 0000000E         ; * r1 --> to
   58 0000000E         ; */
   59 0000000E         os_arch_context_switch_interrupt
   60 0000000E                 EXPORT           os_arch_context_switch_interrup
t
   61 0000000E         os_arch_context_switch
                               PROC
   62 0000000E                 EXPORT           os_arch_context_switch
   63 0000000E         
   64 0000000E         ; set interrupt_switch_flag to 1
   65 0000000E 4A31            LDR              r2, =interrupt_switch_flag
   66 00000010 6813            LDR              r3, [r2]
   67 00000012 2B01            CMP              r3, #1
   68 00000014 D004            BEQ              _reswitch
   69 00000016 F04F 0301       MOV              r3, #1
   70 0000001A 6013            STR              r3, [r2]
   71 0000001C         
   72 0000001C 4A2E            LDR              r2, =interrupt_switch_task_from
 
                                                            ; set interrupt_swi
                                                            tch_task_from
   73 0000001E 6010            STR              r0, [r2]
   74 00000020         
   75 00000020         _reswitch
   76 00000020 4A2E            LDR              r2, =interrupt_switch_task_to ;
                                                             set interrupt_swit
                                                            ch_task_to
   77 00000022 6011            STR              r1, [r2]
   78 00000024         
   79 00000024 482E            LDR              r0, =NVIC_INT_CTRL ; trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
   80 00000026 F04F 5180       LDR              r1, =NVIC_PENDSVSET
   81 0000002A 6001            STR              r1, [r0]
   82 0000002C 4770            BX               LR
   83 0000002E                 ENDP
   84 0000002E         
   85 0000002E         ; r0 --> switch from task stack



ARM Macro Assembler    Page 3 


   86 0000002E         ; r1 --> switch to task stack
   87 0000002E         ; psr, pc, lr, r12, r3, r2, r1, r0 are pushed into [from
                       ] stack
   88 0000002E         PendSV_Handler
                               PROC
   89 0000002E                 EXPORT           PendSV_Handler
   90 0000002E         
   91 0000002E         ; disable interrupt to protect context switch
   92 0000002E F3EF 8210       MRS              r2, PRIMASK
   93 00000032 B672            CPSID            I
   94 00000034         
   95 00000034         ; get interrupt_switch_flag
   96 00000034 4827            LDR              r0, =interrupt_switch_flag
   97 00000036 6801            LDR              r1, [r0]
   98 00000038 B191            CBZ              r1, pendsv_exit ; pendsv alread
                                                            y handled
   99 0000003A         
  100 0000003A         ; clear interrupt_switch_flag to 0
  101 0000003A F04F 0100       MOV              r1, #0x00
  102 0000003E 6001            STR              r1, [r0]
  103 00000040         
  104 00000040 4825            LDR              r0, =interrupt_switch_task_from
  105 00000042 6801            LDR              r1, [r0]
  106 00000044 B129            CBZ              r1, switch_to_task ; skip regis
                                                            ter save at the fir
                                                            st time
  107 00000046         
  108 00000046 F3EF 8109       MRS              r1, psp     ; get from task sta
                                                            ck pointer
  109 0000004A E921 0FF0       STMFD            r1!, {r4 - r11} ; push r4 - r11
                                                             register
  110 0000004E 6800            LDR              r0, [r0]
  111 00000050 6001            STR              r1, [r0]    ; update from task 
                                                            stack pointer
  112 00000052         
  113 00000052         switch_to_task
  114 00000052 4922            LDR              r1, =interrupt_switch_task_to
  115 00000054 6809            LDR              r1, [r1]
  116 00000056 6809            LDR              r1, [r1]    ; load task stack p
                                                            ointer
  117 00000058         
  118 00000058 E8B1 0FF0       LDMFD            r1!, {r4 - r11} ; pop r4 - r11 
                                                            register
  119 0000005C F381 8809       MSR              psp, r1     ; update stack poin
                                                            ter
  120 00000060         
  121 00000060         pendsv_exit
  122 00000060         ; restore interrupt
  123 00000060 F382 8810       MSR              PRIMASK, r2
  124 00000064         
  125 00000064 F04E 0E04       ORR              lr, lr, #0x04
  126 00000068 4770            BX               lr
  127 0000006A                 ENDP
  128 0000006A         
  129 0000006A         ;/*
  130 0000006A         ; * void os_arch_context_switch_to(rt_uint32 to);
  131 0000006A         ; * r0 --> to
  132 0000006A         ; * this fucntion is used to perform the first task swit
                       ch



ARM Macro Assembler    Page 4 


  133 0000006A         ; */
  134 0000006A         os_arch_context_switch_to
                               PROC
  135 0000006A                 EXPORT           os_arch_context_switch_to
  136 0000006A         ; set to task
  137 0000006A 491C            LDR              r1, =interrupt_switch_task_to
  138 0000006C 6008            STR              r0, [r1]
  139 0000006E         
  140 0000006E         ; set from task to 0
  141 0000006E 491A            LDR              r1, =interrupt_switch_task_from
  142 00000070 F04F 0000       MOV              r0, #0x0
  143 00000074 6008            STR              r0, [r1]
  144 00000076         
  145 00000076         ; set interrupt flag to 1
  146 00000076 4917            LDR              r1, =interrupt_switch_flag
  147 00000078 F04F 0001       MOV              r0, #1
  148 0000007C 6008            STR              r0, [r1]
  149 0000007E         
  150 0000007E         ; set the PendSV exception priority
  151 0000007E 4819            LDR              r0, =NVIC_SYSPRI2
  152 00000080 F44F 017F       LDR              r1, =NVIC_PENDSV_PRI
  153 00000084 F8D0 2000       LDR.W            r2, [r0,#0x00] ; read
  154 00000088 EA41 0102       ORR              r1,r1,r2    ; modify
  155 0000008C 6001            STR              r1, [r0]    ; write-back
  156 0000008E         
  157 0000008E         ; trigger the PendSV exception (causes context switch)
  158 0000008E 4814            LDR              r0, =NVIC_INT_CTRL
  159 00000090 F04F 5180       LDR              r1, =NVIC_PENDSVSET
  160 00000094 6001            STR              r1, [r0]
  161 00000096         
  162 00000096         ; restore MSP
  163 00000096 4814            LDR              r0, =SCB_VTOR
  164 00000098 6800            LDR              r0, [r0]
  165 0000009A 6800            LDR              r0, [r0]
  166 0000009C F380 8808       MSR              msp, r0
  167 000000A0         
  168 000000A0         ; enable interrupts at processor level
  169 000000A0 B662            CPSIE            I
  170 000000A2         
  171 000000A2         ; never reach here!
  172 000000A2                 ENDP
  173 000000A2         
  174 000000A2                 IMPORT           os_arch_hard_fault_exception
  175 000000A2                 EXPORT           HardFault_Handler
  176 000000A2         HardFault_Handler
                               PROC
  177 000000A2         
  178 000000A2         ; get current context
  179 000000A2 F01E 0F04       TST              lr, #0x04   ; if (!EXC_RETURN[2
                                                            ])
  180 000000A6 BF14 F3EF 
              8008             MRSNE            r0, msp     ; get fault context
                                                             from handler.
  181 000000AC F3EF 8009       MRSEQ            r0, psp     ; get fault context
                                                             from task.
  182 000000B0         
  183 000000B0 E920 0FF0       STMFD            r0!, {r4 - r11} ; push r4 - r11
                                                             register
  184 000000B4 F840 ED04       STMFD            r0!, {lr}   ; push exec_return 



ARM Macro Assembler    Page 5 


                                                            register
  185 000000B8         
  186 000000B8 BF14 F380 
              8808             MSRNE            msp, r0     ; update stack poin
                                                            ter to MSP.
  187 000000BE F380 8809       MSREQ            psp, r0     ; update stack poin
                                                            ter to PSP.
  188 000000C2         
  189 000000C2 B500            PUSH             {lr}
  190 000000C4 F7FF FFFE       BL               os_arch_hard_fault_exception
  191 000000C8 F85D EB04       POP              {lr}
  192 000000CC         
  193 000000CC F04E 0E04       ORR              lr, lr, #0x04
  194 000000D0 4770            BX               lr
  195 000000D2                 ENDP
  196 000000D2         
  197 000000D2 00 00           ALIGN            4
  198 000000D4         
  199 000000D4                 END
              00000000 
              00000000 
              00000000 
              E000ED04 
              E000ED20 
              E000ED08 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\output\context_rvds.d -o.\output\context_rvds.o -I.\RTE\_STM32F1
07VC -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -Id:\Keil_v5
\ARM\CMSIS\Include --predefine="__UVISION_VERSION SETA 523" --predefine="STM32F
10X_CL SETA 1" --list=.\output\context_rvds.lst ..\..\lib\os\src\arch\cortex_m3
\context_rvds.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 26 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      None
Comment: .text unused
HardFault_Handler 000000A2

Symbol: HardFault_Handler
   Definitions
      At line 176 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 175 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
Comment: HardFault_Handler used once
PendSV_Handler 0000002E

Symbol: PendSV_Handler
   Definitions
      At line 88 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 89 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
Comment: PendSV_Handler used once
_reswitch 00000020

Symbol: _reswitch
   Definitions
      At line 75 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 68 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
Comment: _reswitch used once
os_arch_context_switch 0000000E

Symbol: os_arch_context_switch
   Definitions
      At line 61 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 62 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
Comment: os_arch_context_switch used once
os_arch_context_switch_interrupt 0000000E

Symbol: os_arch_context_switch_interrupt
   Definitions
      At line 59 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 60 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
Comment: os_arch_context_switch_interrupt used once
os_arch_context_switch_to 0000006A

Symbol: os_arch_context_switch_to
   Definitions
      At line 134 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 135 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
Comment: os_arch_context_switch_to used once
os_enter_critical 00000000

Symbol: os_enter_critical



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 38 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 39 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
Comment: os_enter_critical used once
os_exit_critical 00000008

Symbol: os_exit_critical
   Definitions
      At line 48 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 49 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
Comment: os_exit_critical used once
pendsv_exit 00000060

Symbol: pendsv_exit
   Definitions
      At line 121 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 98 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
Comment: pendsv_exit used once
switch_to_task 00000052

Symbol: switch_to_task
   Definitions
      At line 113 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 106 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
Comment: switch_to_task used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 21 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 79 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
      At line 158 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 24 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 80 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
      At line 159 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S

NVIC_PENDSV_PRI 00FF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 23 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 152 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI2 E000ED20

Symbol: NVIC_SYSPRI2
   Definitions
      At line 22 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 151 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
Comment: NVIC_SYSPRI2 used once
SCB_VTOR E000ED08

Symbol: SCB_VTOR
   Definitions
      At line 20 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 163 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
Comment: SCB_VTOR used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

interrupt_switch_flag 00000000

Symbol: interrupt_switch_flag
   Definitions
      At line 31 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 65 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
      At line 96 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
      At line 146 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S

interrupt_switch_task_from 00000000

Symbol: interrupt_switch_task_from
   Definitions
      At line 32 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 72 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
      At line 104 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
      At line 141 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S

interrupt_switch_task_to 00000000

Symbol: interrupt_switch_task_to
   Definitions
      At line 33 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 76 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
      At line 114 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
      At line 137 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S

os_arch_hard_fault_exception 00000000

Symbol: os_arch_hard_fault_exception
   Definitions
      At line 174 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
   Uses
      At line 190 in file ..\..\lib\os\src\arch\cortex_m3\context_rvds.S
Comment: os_arch_hard_fault_exception used once
4 symbols
354 symbols in table
