<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\timer.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\timer.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Sat Jul 22 17:27:02 2017
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; os_start &rArr; os_init_timer_task &rArr; os_task_init &rArr; _os_task_init &rArr; os_timer_init &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6a]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[21]">CAN1_RX0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[20]">CAN1_TX_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[46]">CAN2_RX0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[47]">CAN2_RX1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[48]">CAN2_SCE_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[45]">CAN2_TX_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[40]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[41]">DMA2_Channel4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[42]">DMA2_Channel5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[43]">ETH_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[44]">ETH_WKUP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[49]">OTG_FS_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[37]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[39]">SPI3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4a]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_cl.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[38]">TIM5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3c]">TIM6_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3d]">TIM7_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3a]">UART4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3b]">UART5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[58]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_cl.o(.text)
 <LI><a href="#[57]">console_output_null</a> from os_console.o(i.console_output_null) referenced from os_console.o(.data)
 <LI><a href="#[50]">init_task_cleanup</a> from application.o(i.init_task_cleanup) referenced from application.o(i.init_task_entry)
 <LI><a href="#[4e]">init_task_entry</a> from application.o(i.init_task_entry) referenced from application.o(i.application_init)
 <LI><a href="#[4c]">os_task_exit</a> from os_task.o(i.os_task_exit) referenced from os_task.o(i._os_task_init)
 <LI><a href="#[51]">os_task_idle_entry</a> from os_idle.o(i.os_task_idle_entry) referenced from os_idle.o(i.os_init_idle_task)
 <LI><a href="#[4d]">os_task_timeout</a> from os_task.o(i.os_task_timeout) referenced from os_task.o(i._os_task_init)
 <LI><a href="#[52]">os_task_timer_entry</a> from os_timer_task.o(i.os_task_timer_entry) referenced from os_timer_task.o(i.os_init_timer_task)
 <LI><a href="#[53]">time_out1</a> from timer_test.o(i.time_out1) referenced from timer_test.o(i.timer_test)
 <LI><a href="#[54]">time_out2</a> from timer_test.o(i.time_out2) referenced from timer_test.o(i.timer_test)
 <LI><a href="#[55]">time_out3</a> from timer_test.o(i.time_out3) referenced from timer_test.o(i.timer_test)
 <LI><a href="#[56]">time_out4</a> from timer_test.o(i.time_out4) referenced from timer_test.o(i.timer_test)
 <LI><a href="#[4f]">usart2_output</a> from usart2.o(i.usart2_output) referenced from board.o(i.board_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[58]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ba]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[bb]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[bc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[60]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[bd]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[be]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[65]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[d2]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[d3]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[d4]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[d5]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[d6]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[d7]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[d8]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[5a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[d9]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[5d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[da]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[61]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; os_start &rArr; os_init_timer_task &rArr; os_task_init &rArr; _os_task_init &rArr; os_timer_init &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[6b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[64]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[dc]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[66]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9c]"></a>__ffs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cpuport.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_start
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[80]"></a>os_enter_critical</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_isr_leave
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_isr_enter
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_suspend
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_idle_excute
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_resume
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_heap_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_check
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_yield
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_exit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_remove
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_lock
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_insert
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_sched_stack_check
</UL>

<P><STRONG><a name="[96]"></a>os_exit_critical</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_isr_leave
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_isr_enter
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_suspend
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_idle_excute
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_resume
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_heap_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_check
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_yield
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_exit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_remove
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_lock
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_insert
</UL>

<P><STRONG><a name="[9d]"></a>os_arch_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched
</UL>

<P><STRONG><a name="[9e]"></a>os_arch_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>os_arch_context_switch_to</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_start
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HardFault_Handler &rArr; os_arch_hard_fault_exception &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_arch_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[63]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e0]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e1]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[e2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>GPIO_Init</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GPIO_Init &rArr; assert_failed &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIO_Configuration
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
</UL>

<P><STRONG><a name="[6e]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 454 bytes, Stack size 32 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GPIO_PinRemapConfig &rArr; assert_failed &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIO_Configuration
</UL>

<P><STRONG><a name="[b9]"></a>GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, io.o(i.GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_out2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_out1
</UL>

<P><STRONG><a name="[6f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RCC_Configuration
</UL>

<P><STRONG><a name="[70]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RCC_Configuration
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
</UL>

<P><STRONG><a name="[7a]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SysTick_Handler &rArr; os_tick_increase &rArr; os_timer_check &rArr; os_timer_start &rArr; os_sched &rArr; _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_increase
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_isr_leave
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_isr_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SystemInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>USART_Cmd</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USART_Cmd &rArr; assert_failed &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
</UL>

<P><STRONG><a name="[77]"></a>USART_GPIO_Configuration</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usart2.o(i.USART_GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USART_GPIO_Configuration &rArr; GPIO_Init &rArr; assert_failed &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
</UL>

<P><STRONG><a name="[78]"></a>USART_GetFlagStatus</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USART_GetFlagStatus &rArr; assert_failed &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_output
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
</UL>

<P><STRONG><a name="[79]"></a>USART_Init</STRONG> (Thumb, 450 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = USART_Init &rArr; assert_failed &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
</UL>

<P><STRONG><a name="[7b]"></a>USART_RCC_Configuration</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart2.o(i.USART_RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USART_RCC_Configuration &rArr; RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
</UL>

<P><STRONG><a name="[7c]"></a>USART_SendData</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USART_SendData &rArr; assert_failed &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_output
</UL>

<P><STRONG><a name="[87]"></a>_os_timer_remove</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_timer.o(i._os_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _os_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_soft_timer_check
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_check
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
</UL>

<P><STRONG><a name="[89]"></a>application_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, application.o(i.application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = application_init &rArr; os_task_init &rArr; _os_task_init &rArr; os_timer_init &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_version_get
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>assert_failed</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, board.o(i.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = assert_failed &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[8d]"></a>board_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, board.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = board_init &rArr; usart2_init &rArr; USART_Init &rArr; assert_failed &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>console_output_null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_console.o(i.console_output_null))
<BR>[Address Reference Count : 1]<UL><LI> os_console.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>init_task_cleanup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, application.o(i.init_task_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = init_task_cleanup &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.init_task_entry)
</UL>
<P><STRONG><a name="[4e]"></a>init_task_entry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, application.o(i.init_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = init_task_entry &rArr; timer_test &rArr; os_timer_start &rArr; os_sched &rArr; _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_self
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.application_init)
</UL>
<P><STRONG><a name="[8e]"></a>io_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, io.o(i.io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = io_init &rArr; GPIO_Init &rArr; assert_failed &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[62]"></a>main</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = main &rArr; os_start &rArr; os_init_timer_task &rArr; os_task_init &rArr; _os_task_init &rArr; os_timer_init &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[68]"></a>os_arch_hard_fault_exception</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, cpuport.o(i.os_arch_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = os_arch_hard_fault_exception &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_self
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[84]"></a>os_arch_task_stack_init</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, cpuport.o(i.os_arch_task_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = os_arch_task_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_task_init
</UL>

<P><STRONG><a name="[7e]"></a>os_assert</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, os_misc.o(i.os_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_suspend
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_idle_excute
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_tick_set
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_resume
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_heap_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_timeout
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_task_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_remove
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_insert
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_sched_stack_check
</UL>

<P><STRONG><a name="[94]"></a>os_heap_init</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, os_heap.o(i.os_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = os_heap_init &rArr; os_sem_init &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_isr_nest_get
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[92]"></a>os_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os.o(i.os_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = os_init &rArr; os_heap_init &rArr; os_sem_init &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_heap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>os_init_idle_task</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, os_idle.o(i.os_init_idle_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_init_idle_task &rArr; os_task_init &rArr; _os_task_init &rArr; os_timer_init &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
</UL>

<P><STRONG><a name="[9a]"></a>os_init_timer_task</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, os_timer_task.o(i.os_init_timer_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = os_init_timer_task &rArr; os_task_init &rArr; _os_task_init &rArr; os_timer_init &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
</UL>

<P><STRONG><a name="[73]"></a>os_isr_enter</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_irq.o(i.os_isr_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_isr_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[75]"></a>os_isr_leave</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_irq.o(i.os_isr_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_isr_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[95]"></a>os_isr_nest_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_irq.o(i.os_isr_nest_get))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_idle_excute
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_heap_init
</UL>

<P><STRONG><a name="[82]"></a>os_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_list.o(i.os_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sem_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_timer_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_task_init
</UL>

<P><STRONG><a name="[ab]"></a>os_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_list.o(i.os_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_exit
</UL>

<P><STRONG><a name="[a0]"></a>os_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_list.o(i.os_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_yield
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_insert
</UL>

<P><STRONG><a name="[a3]"></a>os_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_list.o(i.os_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_timer_entry
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_remove
</UL>

<P><STRONG><a name="[88]"></a>os_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_list.o(i.os_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_idle_excute
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_resume
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_timer_remove
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_yield
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_timeout
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_remove
</UL>

<P><STRONG><a name="[83]"></a>os_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, rtstring.o(i.os_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = os_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_task_init
</UL>

<P><STRONG><a name="[9b]"></a>os_sched</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os_sched.o(i.os_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = os_sched &rArr; _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_arch_context_switch_interrupt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_arch_context_switch
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_sched_stack_check
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_timer_entry
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_yield
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_timeout
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_exit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_unlock
</UL>

<P><STRONG><a name="[98]"></a>os_sched_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, os_sched.o(i.os_sched_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = os_sched_init &rArr; os_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[9f]"></a>os_sched_insert</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_sched.o(i.os_sched_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = os_sched_insert &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_insert_before
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_resume
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_timeout
</UL>

<P><STRONG><a name="[a1]"></a>os_sched_lock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, os_sched.o(i.os_sched_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_sched_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_soft_timer_check
</UL>

<P><STRONG><a name="[a2]"></a>os_sched_remove</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, os_sched.o(i.os_sched_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = os_sched_remove &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_remove
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_isempty
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_suspend
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_exit
</UL>

<P><STRONG><a name="[a4]"></a>os_sched_start</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_sched.o(i.os_sched_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_sched_start
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_arch_context_switch_to
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
</UL>

<P><STRONG><a name="[a6]"></a>os_sched_unlock</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, os_sched.o(i.os_sched_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = os_sched_unlock &rArr; os_sched &rArr; _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_soft_timer_check
</UL>

<P><STRONG><a name="[97]"></a>os_sem_init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, os_sem.o(i.os_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = os_sem_init &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_heap_init
</UL>

<P><STRONG><a name="[a7]"></a>os_soft_timer_check</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, os_timer_task.o(i.os_soft_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = os_soft_timer_check &rArr; os_timer_start &rArr; os_sched &rArr; _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_timer_remove
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_unlock
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_lock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_timer_entry
</UL>

<P><STRONG><a name="[93]"></a>os_start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os.o(i.os_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = os_start &rArr; os_init_timer_task &rArr; os_task_init &rArr; _os_task_init &rArr; os_timer_init &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_start
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_timer_task
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_idle_task
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>os_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtstring.o(i.os_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_vsnprintf
</UL>

<P><STRONG><a name="[4c]"></a>os_task_exit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_task.o(i.os_task_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = os_task_exit &rArr; os_sched &rArr; _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_insert_after
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_delete
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_task.o(i._os_task_init)
</UL>
<P><STRONG><a name="[ac]"></a>os_task_idle_excute</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_idle.o(i.os_task_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = os_task_idle_excute &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_remove
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_task
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_isr_nest_get
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_idle_entry
</UL>

<P><STRONG><a name="[8b]"></a>os_task_init</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, os_task.o(i.os_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = os_task_init &rArr; _os_task_init &rArr; os_timer_init &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_task_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_timer_task
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_idle_task
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[ae]"></a>os_task_resume</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, os_task.o(i.os_task_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = os_task_resume &rArr; os_timer_stop &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_remove
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
</UL>

<P><STRONG><a name="[90]"></a>os_task_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_task.o(i.os_task_self))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_increase
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_startup
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_arch_hard_fault_exception
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task_entry
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_timer_entry
</UL>

<P><STRONG><a name="[b0]"></a>os_task_sleep</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, os_task.o(i.os_task_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = os_task_sleep &rArr; os_timer_start &rArr; os_sched &rArr; _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_suspend
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_tick_set
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_out4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_out3
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_timer_entry
</UL>

<P><STRONG><a name="[8c]"></a>os_task_startup</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, os_task.o(i.os_task_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = os_task_startup &rArr; os_sched &rArr; _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_resume
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_self
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_timer_task
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init_idle_task
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[b1]"></a>os_task_suspend</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_task.o(i.os_task_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = os_task_suspend &rArr; os_timer_stop &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_timer_entry
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
</UL>

<P><STRONG><a name="[4d]"></a>os_task_timeout</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, os_task.o(i.os_task_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = os_task_timeout &rArr; os_sched &rArr; _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_remove
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched_insert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_task.o(i._os_task_init)
</UL>
<P><STRONG><a name="[b3]"></a>os_task_yield</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, os_task.o(i.os_task_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = os_task_yield &rArr; os_sched &rArr; _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_insert_before
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_remove
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_increase
</UL>

<P><STRONG><a name="[a8]"></a>os_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_tick.o(i.os_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_soft_timer_check
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_timer_entry
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_check
</UL>

<P><STRONG><a name="[74]"></a>os_tick_increase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_tick.o(i.os_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = os_tick_increase &rArr; os_timer_check &rArr; os_timer_start &rArr; os_sched &rArr; _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_self
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_check
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b4]"></a>os_timer_check</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, os_timer.o(i.os_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = os_timer_check &rArr; os_timer_start &rArr; os_sched &rArr; _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_timer_remove
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_increase
</UL>

<P><STRONG><a name="[aa]"></a>os_timer_delete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_timer.o(i.os_timer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = os_timer_delete &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_exit
</UL>

<P><STRONG><a name="[85]"></a>os_timer_init</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, os_timer.o(i.os_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = os_timer_init &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_test
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_task_init
</UL>

<P><STRONG><a name="[a9]"></a>os_timer_start</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, os_timer.o(i.os_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = os_timer_start &rArr; os_sched &rArr; _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_insert_after
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_resume
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_timer_remove
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_test
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_soft_timer_check
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_check
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
</UL>

<P><STRONG><a name="[af]"></a>os_timer_stop</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_timer.o(i.os_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = os_timer_stop &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_suspend
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_resume
</UL>

<P><STRONG><a name="[b2]"></a>os_timer_tick_set</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_timer.o(i.os_timer_tick_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = os_timer_tick_set &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
</UL>

<P><STRONG><a name="[8a]"></a>os_version_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_version.o(i.os_version_get))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>

<P><STRONG><a name="[b5]"></a>os_vsnprintf</STRONG> (Thumb, 800 bytes, Stack size 88 bytes, rtstdio.o(i.os_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strlen
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
</UL>

<P><STRONG><a name="[7f]"></a>printk</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, rtstdio.o(i.printk))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_idle_excute
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_heap_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_arch_hard_fault_exception
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_out4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_out3
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task_cleanup
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_sched_stack_check
</UL>

<P><STRONG><a name="[91]"></a>timer_test</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, timer_test.o(i.timer_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = timer_test &rArr; os_timer_start &rArr; os_sched &rArr; _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task_entry
</UL>

<P><STRONG><a name="[8f]"></a>usart2_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, usart2.o(i.usart2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = usart2_init &rArr; USART_Init &rArr; assert_failed &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RCC_Configuration
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[4f]"></a>usart2_output</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usart2.o(i.usart2_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = usart2_output &rArr; USART_SendData &rArr; assert_failed &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.board_init)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[71]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[72]"></a>SetSysClockTo72</STRONG> (Thumb, 264 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[ad]"></a>_has_defunct_task</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_idle.o(i._has_defunct_task))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_idle_excute
</UL>

<P><STRONG><a name="[51]"></a>os_task_idle_entry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_idle.o(i.os_task_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = os_task_idle_entry &rArr; os_task_idle_excute &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_idle.o(i.os_init_idle_task)
</UL>
<P><STRONG><a name="[7d]"></a>_os_sched_stack_check</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, os_sched.o(i._os_sched_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched
</UL>

<P><STRONG><a name="[81]"></a>_os_task_init</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, os_task.o(i._os_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _os_task_init &rArr; os_timer_init &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_assert
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_arch_task_stack_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_init
</UL>

<P><STRONG><a name="[86]"></a>_os_timer_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, os_timer.o(i._os_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _os_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
</UL>

<P><STRONG><a name="[52]"></a>os_task_timer_entry</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, os_timer_task.o(i.os_task_timer_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = os_task_timer_entry &rArr; os_soft_timer_check &rArr; os_timer_start &rArr; os_sched &rArr; _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_suspend
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_sched
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_list_isempty
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_self
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_soft_timer_check
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_timer_task.o(i.os_init_timer_task)
</UL>
<P><STRONG><a name="[b8]"></a>print_number</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, rtstdio.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_vsnprintf
</UL>

<P><STRONG><a name="[b6]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtstdio.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_vsnprintf
</UL>

<P><STRONG><a name="[53]"></a>time_out1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer_test.o(i.time_out1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = time_out1
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TogglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_test.o(i.timer_test)
</UL>
<P><STRONG><a name="[54]"></a>time_out2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer_test.o(i.time_out2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = time_out2
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TogglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_test.o(i.timer_test)
</UL>
<P><STRONG><a name="[55]"></a>time_out3</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer_test.o(i.time_out3))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = time_out3 &rArr; os_task_sleep &rArr; os_timer_start &rArr; os_sched &rArr; _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_test.o(i.timer_test)
</UL>
<P><STRONG><a name="[56]"></a>time_out4</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer_test.o(i.time_out4))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = time_out4 &rArr; os_task_sleep &rArr; os_timer_start &rArr; os_sched &rArr; _os_sched_stack_check &rArr; os_assert &rArr; printk &rArr; os_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_test.o(i.timer_test)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
